#!/usr/bin/env python3

import argparse
import os
import re
import sys

from moj_analytics.auth0_client import (
    Auth0,
    AuthorizationAPI,
    Group,
    ManagementAPI,
    User
)


DELIMITERS = re.compile(r'[,; ]+')
EMAIL_USER = re.compile(
    r"^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*\Z",
    re.IGNORECASE
)
EMAIL_DOMAIN = re.compile(
    # max length for domain name labels is 63 characters per RFC 1034
    r'((?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+)(?:[A-Z0-9-]{2,63}(?<!-))\Z',
    re.IGNORECASE
)


class InvalidEmails(Exception):
    pass


class NoUsers(Exception):
    pass


class UnknownGroup(Exception):
    pass


class AccessGranter(object):

    def __init__(self, client_id, client_secret, domain, authz_url, audience):
        self.api = Auth0(client_id, client_secret, domain)
        self.api.access(ManagementAPI(domain))
        self.api.access(AuthorizationAPI(authz_url, audience))
        self.invalid_emails = []

    def grant_users_access_to_app(self, emails, app_name):
        emails = self.parse_emails(emails)
        users = self.get_users(emails)

        self.add_users_to_group(users, app_name)

        if list(filter(None, self.invalid_emails)):
            raise InvalidEmails(self.invalid_emails)

    def get_users(self, emails):
        users = self.get_users_by_emails(emails)
        new_user_emails = set(emails) - set(user['email'] for user in users)
        return users + self.create_users(new_user_emails)

    def parse_emails(self, emails):
        self.invalid_emails = []
        valid = []

        for email in re.split(DELIMITERS, emails):

            if valid_email(email):
                valid.append(email)

            else:
                self.invalid_emails.append(email)

        return valid

    def get_users_by_emails(self, emails):
        return self.api.management.get_all(User, search={
            'q': 'identities.connection: "email" AND ({})'.format(
                ' OR '.join('email: "{}"'.format(e) for e in emails))
        })

    def create_users(self, emails):
        return [self.create_user(email) for email in emails]

    def create_user(self, email):
        print("Creating user: {}".format(email))
        return self.api.management.create(User(
            connection='email',
            email=email,
            email_verified=True
        ))

    def add_users_to_group(self, users, group_name):

        if not users:
            raise NoUsers()

        group = self.api.authorization.get(Group(name=group_name))

        if not group:
            raise UnknownGroup(group_name)

        user_emails = [user['email'] for user in users]
        print("Adding users to group {}: {}".format(group_name, user_emails))
        group.add_users(users)


def main():
    args = get_args()

    granter = AccessGranter(
        args.client_id,
        args.client_secret,
        args.domain,
        args.authz_url,
        args.authz_audience)

    granter.grant_users_access_to_app(args.emails, args.app_name)


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--client-id',
        default=os.environ.get('AUTH0_CLIENT_USR'),
        help="Auth0 API client ID")
    parser.add_argument(
        '--client-secret',
        default=os.environ.get('AUTH0_CLIENT_PSW'),
        help="Auth0 API client secret")
    parser.add_argument(
        '--domain',
        default=os.environ.get('AUTH0_DOMAIN'),
        help='Auth0 tenant domain')
    parser.add_argument(
        '--authz-url',
        default=os.environ.get('AUTHZ_API_URL'),
        help='Authorization API URL')
    parser.add_argument(
        '--authz-audience',
        default=os.environ.get('AUTHZ_API_ID'),
        help='Authorization API ID')

    parser.add_argument(
        'app_name',
        help='Name of the app to grant access to')

    parser.add_argument(
        'emails',
        help='Semicolon delimited list of email addresses to grant access')

    return parser.parse_args()


def valid_email(s):
    user, _, domain = s.rpartition('@')
    return EMAIL_USER.match(user) and EMAIL_DOMAIN.match(domain)


if __name__ == '__main__':
    try:
        main()

    except InvalidEmails as emails_error:
        print(
            'Some of the email addresses entered were not valid: {}'.format(
                ', '.join(emails_error.args[0])),
            file=sys.stderr)
        sys.exit(1)

    except NoUsers:
        print(
            'Failed to get or create specified users. Please try again later.',
            file=sys.stderr)
        sys.exit(2)

    except UnknownGroup:
        print(
            'The app name was not recognized. This should be the first part of '
            'the Shiny app URL, eg: shiny-app from '
            'https://shiny-app.apps.alpha.mojanalytics.xyz',
            file=sys.stderr)
        sys.exit(3)
