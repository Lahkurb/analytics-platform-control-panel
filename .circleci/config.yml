version: 2
jobs:

  testjs:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-npm-deps-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - v1-npm-deps-{{ .Branch }}
            - v1-npm-deps-
      - run:
          name: npm install
          command: npm install

      - save_cache:
          key: v1-npm-deps-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - ~/usr/local/lib/node_modules
            - ./node_modules

      - run:
          name: Run js tests
          command: npm run test -- --coverage --collectCoverage=true

      - store_artifacts:
          path: coverage

  build:
    docker:
      - image: tmaier/docker-compose

    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar

      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true

      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=controlpanel -t controlpanel .

      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar controlpanel

      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar

      - run:
          name: Run python tests
          command: |
            touch .env  # empty .env file to avoid error
            docker-compose run \
              -e DJANGO_SETTINGS_MODULE=controlpanel.settings.test \
              -e KUBECONFIG=tests/kubeconfig \
              cpanel \
              sh -c "until pg_isready -h db; do sleep 2; done; pytest"

      - deploy:
          name: Push application Docker image
          command: |
            BRANCH=$(echo -n $CIRCLE_BRANCH | tr '/' '-')
            docker login -u ${QUAY_USERNAME} -p ${QUAY_PASSWORD} quay.io
            docker tag controlpanel "quay.io/mojanalytics/control-panel:${CIRCLE_SHA1}"
            docker tag controlpanel "quay.io/mojanalytics/control-panel:${BRANCH}"
            docker push "quay.io/mojanalytics/control-panel:${CIRCLE_SHA1}"
            docker push "quay.io/mojanalytics/control-panel:${BRANCH}"

workflows:
  version: 2
  build_and_test:
    jobs:
      - testjs
      - build:
          requires:
            - testjs
